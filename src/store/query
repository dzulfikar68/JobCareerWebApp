GraphQL, Vuex, and Vuetify
Micro Frontend, Electron, and IndexedDB
Electron, Micro Frontend, and GraphQL

query{
  companies {
    name
    jobs {
      id
      title
      slug
      company {
        name
      }
    }
  }
  cities {
    name
    country {
      name
    }
    jobs {
      id
      title
      slug
      company {
        name
      }
    }
  }
  commitments {
    title
    jobs {
      id
      title
      slug
      company {
        name
      }
    }
  }
  jobs {
    id
    title
    slug
    description
    applyUrl
    postedAt
    commitment {
      title
    }
    cities {
      name
      country {
        name
      }
    }
    company {
      name
      websiteUrl
      twitter
    }
  }
var author = 'andy';
var content = 'hope is a good thing';
var query = `mutation CreateMessage($input: MessageInput) {
  createMessage(input: $input) {
    id
  }
}`;
 
fetch('/graphql', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  body: JSON.stringify({
    query,
    variables: {
      input: {
        author,
        content,
      }
    }
  })
})
  .then(r => r.json())
  .then(data => console.log('data returned:', data));
  query: `
                    jobs {
                        id
                        title
                        slug
                        description
                        applyUrl
                        postedAt
                        commitment {
                            title
                        }
                        cities {
                            name
                            country {
                                name
                            }
                        }
                        company {
                            name
                            websiteUrl
                            twitter
                        }
                    }
            `

async mounted() {
            try {
                var result = await this.axios({
                    method: "POST",
                    url: "https://api.graphql.jobs/",
                    data: {
                        query: `
query{
  cities {
    name
    country {
      name
    }
    jobs {
      title
      commitment {
        title
      }
    }
  }
}
                        `
                    }
                });
                const listin = result.data.data.cities
                const listout = []
                for(var i = 0; i < listin.length; i++) {
                  listout.push(listin[i].name)
                }
                const xxx = listin.flatMap(({name, jobs}) => jobs.map((x) => {
                  x.country = {name: name}
                  return x
                }))
                console.log(listin)
                console.log(xxx)
                // console.log(listout)
            } catch (error) {
                console.error(error);
            }
        },
  created(){
    // const options = {
    //   headers: {
    //     'Access-Control-Allow-Origin': '*',
    //      'Content-type': 'application/json',
    //   }
    // };
    // this.axios.get(`https://jsonplaceholder.typicode.com/posts`)
    //   .then((response) => {
    //     console.log(response)
    //   })
    //   .catch((error) => {
    //     console.log(error)
    //   })
  }

data: () => ({
categories: [
{
id: 1,
image: 'https://via.placeholder.com/150',
name: 'Ekonomi',
slug: 'ekonomi'
},
{
id: 2,
image: 'https://via.placeholder.com/150',
name: 'Agama',
slug: 'agama'
},
]
})
};

async mounted() {
      try {
        var result = await this.axios({
          method: "POST",
          url: "https://api.graphql.jobs/",
          data: {
            query: `
              query{
                cities {
                  name
                  country {
                    name
                  }
                  jobs {
                    title
                    commitment {
                      title
                    }
                  }
                }
              }
            `
          }
        });
        const listin = result.data.data.cities
        const listout = []
        for(var i = 0; i < listin.length; i++) {
          listout.push(listin[i].name)
        }
        const xxx = listin.flatMap(({name, jobs}) => jobs.map((x) => {
          x.country = {name: name}
          return x
        }))
        console.log(listin)
        console.log(xxx)
        // console.log(listout)
      } catch (error) {
        console.error(error);
      }
    },
	}